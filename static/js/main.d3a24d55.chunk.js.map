{"version":3,"sources":["components/Address.jsx","components/ButtonNext.jsx","api/serviceApi.js","redux/actions/converter.js","hooks/http.hook.js","components/ButtonConvert.jsx","components/Ticket.jsx","components/InputFrom.jsx","components/InputTo.jsx","components/Converter.jsx","redux/actions/listMoney.js","App.js","redux/reducers/converter.js","redux/reducers/listMoney.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Address","className","placeholder","type","ButtonNext","converter","from","a","to","sum","request","config","api_key","data","minConvert","setConvertData","key","value","useHttp","React","useCallback","url","method","body","headers","JSON","stringify","fetch","response","json","ok","Error","message","ButtonConvert","memo","dispatch","useDispatch","useSelector","onClick","tickerFrom","tickerTo","valueFrom","alert","convert","payload","estimatedAmount","fetchConvertData","toLowerCase","width","height","viewBox","fill","xmlns","d","Ticket","ticket","setInput","setList","setName","e","target","innerText","window","store","getState","prev","min","minAmount","ticker","toUpperCase","InputFrom","useState","list","input","listMoney","renderList","persist","name","onChange","map","index","InputTo","valueTo","result","disabled","Converter","setListMoney","App","useEffect","fetchListMoney","initialState","converterReducer","state","action","Object","keys","listReducer","rootReducer","combineReducers","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3a24d55.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Address() {\r\n  return (\r\n    <div className=\"converter-block-address\">\r\n      <input placeholder=\"ETH address\" type=\"text\" className=\"input-address\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Address\r\n","import React from 'react'\r\n\r\nfunction ButtonNext() {\r\n  return <button className=\"converter-next\">NEXT</button>\r\n}\r\n\r\nexport default ButtonNext\r\n","import config from '../config/config.json'\r\n\r\nexport const converter = async (from, to = 'BNBMAINNET', sum, request) => {\r\n  const data = await request(\r\n    `https://changenow.io/api/v1/exchange-amount/${sum}/${from}_${to}/?api_key=${config.api_key}`\r\n  )\r\n\r\n  return data\r\n}\r\n\r\nexport const minConvert = async (request, from, to = 'BNBMAINNET') => {\r\n  const data = await request(\r\n    `https://changenow.io/api/v1/min-amount/${from}_${to}`\r\n  )\r\n\r\n  return data\r\n}\r\n","import { converter } from '../../api/serviceApi'\r\n\r\nexport const setConvertData = (key, value) => {\r\n  return {\r\n    type: 'CONVERT_DATA',\r\n    [key]: value,\r\n  }\r\n}\r\n\r\nexport const setConvertResult = result => {\r\n  return {\r\n    type: 'CONVERT_RESULT',\r\n    payload: result,\r\n  }\r\n}\r\n\r\nexport const fetchConvertData = (from, to, sum, request) => async dispatch => {\r\n  const convert = await converter(from, to, sum, request)\r\n  dispatch(setConvertResult(convert.estimatedAmount))\r\n}\r\n","import React from 'react'\r\n\r\nconst useHttp = () => {\r\n  const request = React.useCallback(\r\n    async (url, method = 'GET', body = null, headers = {}) => {\r\n      try {\r\n        if (body) {\r\n          body = JSON.stringify(body)\r\n          headers['Content-Type'] = 'application/json'\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n        })\r\n\r\n        const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n          throw new Error(data.message || 'Что-то пошло не так!')\r\n        }\r\n\r\n        return data\r\n      } catch (e) {\r\n        throw e\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  return {\r\n    request,\r\n  }\r\n}\r\n\r\nexport default useHttp\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchConvertData } from '../redux/actions/converter'\r\nimport useHttp from '../hooks/http.hook'\r\n\r\nfunction ButtonConvertInner() {\r\n  const { request } = useHttp()\r\n  const dispatch = useDispatch()\r\n  const { converter } = useSelector(({ converter }) => ({\r\n    converter: converter,\r\n  }))\r\n\r\n  const clickConvert = () => {\r\n    if (!converter?.tickerFrom) {\r\n      return alert('Введите конвертируемую валюту!')\r\n    } else if (!converter?.tickerTo) {\r\n      return alert('Введите итоговую  валюту!')\r\n    } else if (!converter?.valueFrom) {\r\n      return alert('Введите сумму конвертации!')\r\n    } else if (converter?.valueFrom < converter?.minConvert) {\r\n      return alert(`Минимальная сумма конвертации ${converter?.minConvert}`)\r\n    }\r\n    dispatch(\r\n      fetchConvertData(\r\n        converter?.tickerFrom.toLowerCase(),\r\n        converter?.tickerTo.toLowerCase(),\r\n        converter?.valueFrom,\r\n        request\r\n      )\r\n    )\r\n  }\r\n\r\n  return (\r\n    <button onClick={clickConvert} className=\"button-convert\">\r\n      <svg\r\n        width=\"16\"\r\n        height=\"22\"\r\n        viewBox=\"0 0 16 22\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <path d=\"M9.26228 2.33243L11.3097 4.37983L0.523856 4.37983L0.524061 6.83013L11.3097 6.83013L9.2622 8.87758L10.9948 10.6101L16.0001 5.60493L10.9949 0.599853L9.26228 2.33243Z\" />\r\n        <path d=\"M6.73777 19.365L4.69033 17.3176L15.7312 17.3176L15.731 14.8673L4.69036 14.8673L6.73785 12.8199L5.00527 11.0873L-2.3107e-05 16.0925L5.00516 21.0976L6.73777 19.365Z\" />\r\n      </svg>\r\n    </button>\r\n  )\r\n}\r\n\r\nconst ButtonConvert = React.memo(ButtonConvertInner)\r\n\r\nexport default ButtonConvert\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { minConvert } from '../api/serviceApi'\r\nimport { setConvertData } from '../redux/actions/converter'\r\nimport useHttp from '../hooks/http.hook'\r\nfunction Ticket({ ticket, setInput, type, setList }) {\r\n  const { request } = useHttp()\r\n  const dispatch = useDispatch()\r\n\r\n  const setName = async e => {\r\n    const value = e.target.innerText\r\n    const key = type === 'from' ? 'tickerFrom' : 'tickerTo'\r\n\r\n    dispatch(setConvertData(key, value))\r\n    setList(false)\r\n\r\n    const converter = window.store.getState().converter\r\n\r\n    if (converter?.tickerTo === converter?.tickerFrom) {\r\n      setList(false)\r\n      return alert('Валюты должны быть разные!')\r\n    }\r\n\r\n    setInput(prev => {\r\n      return {\r\n        ...prev,\r\n        [key]: value,\r\n      }\r\n    })\r\n\r\n    if (converter?.tickerFrom && converter?.tickerTo) {\r\n      const min = await minConvert(\r\n        request,\r\n        converter?.tickerFrom,\r\n        converter?.tickerTo\r\n      )\r\n\r\n      dispatch(setConvertData('minConvert', min.minAmount))\r\n      if (!converter?.valueFrom) {\r\n        dispatch(setConvertData('valueFrom', min.minAmount))\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div onClick={setName} className=\"converter-ticket\">\r\n      {ticket?.ticker.toUpperCase()}\r\n    </div>\r\n  )\r\n}\r\nexport default Ticket\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setConvertData } from '../redux/actions/converter'\r\nimport Ticket from './Ticket'\r\n\r\nfunction InputFromInner() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [list, setList] = React.useState(false)\r\n  const [input, setInput] = React.useState({\r\n    valueFrom: '',\r\n    tickerFrom: '',\r\n  })\r\n\r\n  const { listMoney, valueFrom } = useSelector(({ listMoney, converter }) => ({\r\n    listMoney: listMoney.listMoney,\r\n    valueFrom: converter.valueFrom,\r\n  }))\r\n\r\n  const renderList = e => {\r\n    e.persist()\r\n    if (e.target.name === 'tickerFrom') {\r\n      e.target.value ? setList(true) : setList(false)\r\n    }\r\n\r\n    setInput(prev => {\r\n      return {\r\n        ...prev,\r\n        [e.target.name]: e.target.value.toUpperCase(),\r\n      }\r\n    })\r\n    dispatch(setConvertData(e.target.name, e.target.value))\r\n  }\r\n\r\n  return (\r\n    <div className=\"converter-block\">\r\n      <input\r\n        name=\"valueFrom\"\r\n        onChange={renderList}\r\n        value={valueFrom}\r\n        placeholder=\"0\"\r\n        type=\"text\"\r\n      />\r\n      <input\r\n        placeholder={'BTC'}\r\n        value={input.tickerFrom}\r\n        onChange={renderList}\r\n        onClick={() => {\r\n          setList(!list)\r\n        }}\r\n        type=\"text\"\r\n        name=\"tickerFrom\"\r\n      />\r\n\r\n      <div className={list ? 'converter-list' : 'converter-list none'}>\r\n        {listMoney.map((ticket, index) => (\r\n          <Ticket\r\n            key={`${ticket.ticket}_${index}`}\r\n            ticket={ticket}\r\n            setInput={setInput}\r\n            type={'from'}\r\n            setList={setList}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InputFrom = React.memo(InputFromInner)\r\n\r\nexport default InputFrom\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setConvertData } from '../redux/actions/converter'\r\nimport Ticket from './Ticket'\r\n\r\nfunction InputToInner() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [list, setList] = React.useState(false)\r\n  const [input, setInput] = React.useState({\r\n    valueTo: '',\r\n    tickerTo: '',\r\n  })\r\n\r\n  const { listMoney, result } = useSelector(({ listMoney, converter }) => ({\r\n    listMoney: listMoney.listMoney,\r\n    result: converter.result,\r\n  }))\r\n\r\n  const renderList = e => {\r\n    e.persist()\r\n    if (e.target.name === 'tickerTo') {\r\n      e.target.value ? setList(true) : setList(false)\r\n    }\r\n\r\n    dispatch(setConvertData(e.target.name, e.target.value))\r\n\r\n    setInput(prev => {\r\n      return {\r\n        ...prev,\r\n        [e.target.name]: e.target.value,\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"converter-block\">\r\n      <input\r\n        name=\"valueTo\"\r\n        onChange={renderList}\r\n        value={result}\r\n        placeholder=\"0\"\r\n        type=\"text\"\r\n        disabled\r\n      />\r\n      <input\r\n        placeholder={'BNBMAINNET'}\r\n        value={input.tickerTo}\r\n        onChange={renderList}\r\n        onClick={() => {\r\n          setList(!list)\r\n        }}\r\n        type=\"text\"\r\n        name=\"tickerTo\"\r\n      />\r\n\r\n      <div className={list ? 'converter-list' : 'converter-list none'}>\r\n        {listMoney.map((ticket, index) => (\r\n          <Ticket\r\n            key={`${ticket.ticket}_${index}`}\r\n            ticket={ticket}\r\n            setInput={setInput}\r\n            type={'to'}\r\n            setList={setList}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst InputTo = React.memo(InputToInner)\r\n\r\nexport default InputTo\r\n","import React from 'react'\r\n\r\nimport Address from './Address'\r\nimport ButtonNext from './ButtonNext'\r\nimport ButtonConvert from './ButtonConvert'\r\nimport InputFrom from './InputFrom'\r\nimport InputTo from './InputTo'\r\n\r\nfunction Converter() {\r\n  return (\r\n    <div className=\"converter\">\r\n      <div className=\"converter-blocks\">\r\n        <InputFrom />\r\n        <ButtonConvert />\r\n        <InputTo />\r\n      </div>\r\n\r\n      <div className=\"converter-blocks\">\r\n        <Address />\r\n        <ButtonNext />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Converter\r\n","export const setListMoney = listMoney => {\r\n  return {\r\n    type: 'GET_LIST_MONEY',\r\n    payload: listMoney,\r\n  }\r\n}\r\n\r\nexport const fetchListMoney = request => async dispatch => {\r\n  const listMoney = await request(\r\n    'https://changenow.io/api/v1/currencies?active=true',\r\n    'GET'\r\n  )\r\n  dispatch(setListMoney(listMoney))\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport Converter from './components/Converter'\r\nimport { fetchListMoney } from './redux/actions/listMoney'\r\nimport useHttp from './hooks/http.hook'\r\n\r\nfunction App() {\r\n  const { request } = useHttp()\r\n  const dispatch = useDispatch()\r\n  React.useEffect(() => {\r\n    dispatch(fetchListMoney(request))\r\n  })\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Converter />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const initialState = {\r\n  result: 0,\r\n  minConvert: 0,\r\n}\r\n\r\nconst converterReducer = (state = initialState, action) => {\r\n  const key = Object.keys(action)[1]\r\n  const data = action[key]\r\n  switch (action.type) {\r\n    case 'CONVERT_DATA':\r\n      return {\r\n        ...state,\r\n        [key]: data,\r\n      }\r\n\r\n    case 'CONVERT_RESULT':\r\n      return {\r\n        ...state,\r\n        result: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default converterReducer\r\n","const initialState = {\r\n  listMoney: [],\r\n}\r\n\r\nconst listReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'GET_LIST_MONEY':\r\n      return {\r\n        ...state,\r\n        listMoney: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default listReducer\r\n","import { combineReducers } from 'redux'\r\nimport converterReducer from './converter'\r\nimport listReducer from './listMoney'\r\nexport const rootReducer = combineReducers({\r\n  listMoney: listReducer,\r\n  converter: converterReducer,\r\n})\r\n","import { applyMiddleware, createStore } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { rootReducer } from './reducers'\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nwindow.store = store\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './scss/index.scss'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}